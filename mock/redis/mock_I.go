// Code generated by mockery. DO NOT EDIT.

package mockredis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockI is an autogenerated mock type for the I type
type MockI struct {
	mock.Mock
}

type MockI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockI) EXPECT() *MockI_Expecter {
	return &MockI_Expecter{mock: &_m.Mock}
}

// ZIncrBy provides a mock function with given fields: ctx, key, member, incrment
func (_m *MockI) ZIncrBy(ctx context.Context, key string, member string, incrment float64) error {
	ret := _m.Called(ctx, key, member, incrment)

	if len(ret) == 0 {
		panic("no return value specified for ZIncrBy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) error); ok {
		r0 = rf(ctx, key, member, incrment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockI_ZIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZIncrBy'
type MockI_ZIncrBy_Call struct {
	*mock.Call
}

// ZIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
//   - incrment float64
func (_e *MockI_Expecter) ZIncrBy(ctx interface{}, key interface{}, member interface{}, incrment interface{}) *MockI_ZIncrBy_Call {
	return &MockI_ZIncrBy_Call{Call: _e.mock.On("ZIncrBy", ctx, key, member, incrment)}
}

func (_c *MockI_ZIncrBy_Call) Run(run func(ctx context.Context, key string, member string, incrment float64)) *MockI_ZIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *MockI_ZIncrBy_Call) Return(_a0 error) *MockI_ZIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockI_ZIncrBy_Call) RunAndReturn(run func(context.Context, string, string, float64) error) *MockI_ZIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRange provides a mock function with given fields: ctx, key, start, stop
func (_m *MockI) ZRevRange(ctx context.Context, key string, start int64, stop int64) ([]string, error) {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRange")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]string, error)); ok {
		return rf(ctx, key, start, stop)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []string); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, key, start, stop)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockI_ZRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRange'
type MockI_ZRevRange_Call struct {
	*mock.Call
}

// ZRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *MockI_Expecter) ZRevRange(ctx interface{}, key interface{}, start interface{}, stop interface{}) *MockI_ZRevRange_Call {
	return &MockI_ZRevRange_Call{Call: _e.mock.On("ZRevRange", ctx, key, start, stop)}
}

func (_c *MockI_ZRevRange_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *MockI_ZRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockI_ZRevRange_Call) Return(_a0 []string, _a1 error) *MockI_ZRevRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockI_ZRevRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) ([]string, error)) *MockI_ZRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// Zadd provides a mock function with given fields: ctx, key, member, score
func (_m *MockI) Zadd(ctx context.Context, key string, member any, score float64) error {
	ret := _m.Called(ctx, key, member, score)

	if len(ret) == 0 {
		panic("no return value specified for Zadd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any, float64) error); ok {
		r0 = rf(ctx, key, member, score)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockI_Zadd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Zadd'
type MockI_Zadd_Call struct {
	*mock.Call
}

// Zadd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member any
//   - score float64
func (_e *MockI_Expecter) Zadd(ctx interface{}, key interface{}, member interface{}, score interface{}) *MockI_Zadd_Call {
	return &MockI_Zadd_Call{Call: _e.mock.On("Zadd", ctx, key, member, score)}
}

func (_c *MockI_Zadd_Call) Run(run func(ctx context.Context, key string, member any, score float64)) *MockI_Zadd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any), args[3].(float64))
	})
	return _c
}

func (_c *MockI_Zadd_Call) Return(_a0 error) *MockI_Zadd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockI_Zadd_Call) RunAndReturn(run func(context.Context, string, any, float64) error) *MockI_Zadd_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockI creates a new instance of MockI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockI {
	mock := &MockI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
